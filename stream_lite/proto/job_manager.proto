syntax = "proto2";

import "stream_lite/proto/common.proto";

package job_manager;


message SubmitJobRequest {
  repeated common.Task tasks = 1;
  required double periodicity_checkpoint_interval_s = 2;
  required bool auto_migrate = 3 [default = false];
  required bool enable_precopy = 4 [default = false];
};

message SubmitJobResponse {
  required common.Status status = 1;
  optional string jobid = 2;
}

message TriggerCheckpointRequest {
  required string jobid = 1;
  optional bool cancel_job = 2 [default = false];
  optional string migrate_cls_name = 3 [default = ""]; // for migrate cache
  optional int32 migrate_partition_idx = 4 [default = -1]; // for migrate cache
}

message TriggerCheckpointResponse {
  required common.Status status = 1;
  optional int32 checkpoint_id = 2;
}

message RestoreFromCheckpointRequest {
  required string jobid = 1;
  required int32 checkpoint_id = 2;
  required SubmitJobRequest submitJob = 3
}

message RestoreFromCheckpointResponse {
  required common.Status status = 1;
  optional string jobid = 2;
}

message AcknowledgeCheckpointRequest {
  required common.Status status = 1;
  required string subtask_name = 2;
  required string jobid = 3;
  required int32 checkpoint_id = 4;
  required common.File state = 5;
  // optional common.ExecuteTask exec_task = 3;
}

message MigrateRequest {
  required string src_cls_name = 1;
  optional int32 src_partition_idx = 2 [default = 0];
  required string target_task_manager_locate = 3;
  required string jobid = 4;
  required int32 src_currency = 5;
  required int32 with_checkpoint_id = 6 [default = -1];
}

message AcknowledgeMigrateRequest {
  required common.Status status = 1;
  required string subtask_name = 2;
  required string jobid = 3;
  required int32 migrate_id = 4;
}

message NotifyMigrateSynchronRequest {
  required string jobid = 1;
  required int32 migrate_id = 2;
}

message AcknowledgeTerminateRequest {
  required common.Status status = 1;
  required string subtask_name = 2;
  required string jobid = 3;
  required int32 terminate_id = 4;
}


service JobManagerService {
  // from user front client
  rpc submitJob(SubmitJobRequest) returns (SubmitJobResponse) {}
  rpc triggerCheckpoint(TriggerCheckpointRequest) returns (TriggerCheckpointResponse) {}
  rpc restoreFromCheckpoint(RestoreFromCheckpointRequest) 
      returns (RestoreFromCheckpointResponse) {}
  rpc triggerMigrate(MigrateRequest) returns (common.NilResponse) {}

  // from subtask
  rpc acknowledgeCheckpoint(AcknowledgeCheckpointRequest) returns (common.NilResponse) {}
  rpc acknowledgeMigrate(AcknowledgeMigrateRequest) returns (common.NilResponse) {}
  rpc notifyMigrateSynchron(NotifyMigrateSynchronRequest) 
      returns (common.NilResponse) {}
  rpc acknowledgeTerminate(AcknowledgeTerminateRequest) returns (common.NilResponse) {}
};
