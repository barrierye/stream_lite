syntax = "proto2";

import "stream_lite/proto/common.proto";

package job_manager;


message SubmitJobRequest {
  repeated common.Task tasks = 1;
};

message SubmitJobResponse {
  required common.Status status = 1;
  optional string jobid = 2;
}

message RegisterTaskManagerRequest {
  required common.TaskManagerDescription task_manager_desc = 1;
}

message TriggerCheckpointRequest {
  required string jobid = 1;
  optional bool cancel_job = 2 [default = false];
}

message TriggerCheckpointResponse {
  required common.Status status = 1;
  optional int32 checkpoint_id = 2;
}

message RestoreFromCheckpointRequest {
  required string jobid = 1;
  required int32 checkpoint_id = 2;
}

message RestoreFromCheckpointResponse {
  required common.Status status = 1;
  optional string jobid = 2;
}

message AcknowledgeCheckpointRequest {
  required common.Status status = 1;
  required string subtask_name = 2;
  required string jobid = 3;
  required int32 checkpoint_id = 4;
  required common.File state = 5;
  // optional common.ExecuteTask exec_task = 3;
}

message MigrateRequest {
  required string src_cls_name = 1;
  optional int32 src_partition_idx = 2 [default = 0];
  required string target_task_manager_locate = 3;
  required string jobid = 4;
}

message AcknowledgeMigrateRequest {
  required common.Status status = 1;
  required string subtask_name = 2;
  required string jobid = 3;
  required int32 migrate_id = 4;
}

service JobManagerService {
  // from user front client
  rpc submitJob(SubmitJobRequest) returns (SubmitJobResponse) {}
  rpc triggerCheckpoint(TriggerCheckpointRequest) returns (TriggerCheckpointResponse) {}
  rpc restoreFromCheckpoint(RestoreFromCheckpointRequest) 
      returns (RestoreFromCheckpointResponse) {}
  rpc triggerMigrate(MigrateRequest) returns (common.NilResponse) {}
  
  // from task manager
  rpc registerTaskManager(RegisterTaskManagerRequest) returns (common.NilResponse) {}

  // from subtask
  rpc acknowledgeCheckpoint(AcknowledgeCheckpointRequest) returns (common.NilResponse) {}
  rpc acknowledgeMigrate(AcknowledgeMigrateRequest) returns (common.NilResponse) {}
};
